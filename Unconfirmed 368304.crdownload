#!/usr/bin/env python
# coding: utf-8

# In[16]:


import numpy as np
import pandas as pd


# In[26]:


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


# In[27]:


raw_mail_data = pd.read_csv('mail_data.csv')


# In[28]:


print(raw_mail_data)


# In[29]:


mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')


# In[30]:


mail_data.head()


# In[31]:


mail_data.shape


# In[36]:


mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0

mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1


# In[33]:


X = mail_data['Message']

Y = mail_data['Category']


# In[37]:


print(X)


# In[39]:


print(Y)


# In[40]:


X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)


# In[41]:


print(X.shape)
print(X_train.shape)
print(X_test.shape)


# In[42]:


feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase='True')

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')


# In[43]:


print(X_train)


# In[44]:


model = LogisticRegression()


# In[45]:


model.fit(X_train_features, Y_train)


# In[46]:


LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)


# In[47]:


prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)


# In[48]:


print('Accuracy on training data : ', accuracy_on_training_data)


# In[49]:


prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)


# In[50]:


print('Accuracy on test data : ', accuracy_on_test_data)


# In[51]:


input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')


# In[52]:


df=pd.read_csv('mail_data.csv')


# In[53]:


df


# In[55]:


df.shape


# In[56]:


df.isna().sum()


# In[63]:


raw_mail_data.duplicated().sum()


# In[64]:


raw_mail_data.duplicated().sum


# In[71]:


raw_mail_data = raw_mail_data.reset_index(drop=True)

raw_mail_data.shape


# In[ ]:




